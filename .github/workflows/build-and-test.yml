name: Build and Test

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "gh-pages/**"
      - "*.md"
  push:
    branches:
      - main
    paths-ignore:
      - "gh-pages/**"
      - "*.md"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

concurrency:
  group: ${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build-test:
    name: Build, Lint, and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc

          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Dev Drive (Windows)
        if: runner.os == 'Windows'
        id: devdrive
        uses: samypr100/setup-dev-drive@v3
        with:
          drive-size: 4GB
          drive-format: ReFS
          drive-type: Fixed
          workspace-copy: true
          native-dev-drive: true
          env-mapping: |
            CARGO_HOME,{{ DEV_DRIVE }}/.cargo
            RUSTUP_HOME,{{ DEV_DRIVE }}/.rustup

      - name: Configure Windows environment for Dev Drive
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "CARGO_TARGET_DIR=${{ env.DEV_DRIVE_WORKSPACE }}/target" >> $env:GITHUB_ENV

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          rustflags: ""
          cache-key: ${{ matrix.target }}
          cache-workspaces: ${{ env.DEV_DRIVE_WORKSPACE || github.workspace }}
          components: rustc, rust-std, cargo, rustfmt, clippy

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install openssl

      - name: Install dependencies (Linux x86_32)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'i686-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-multilib

      - name: Build
        working-directory: ${{ runner.os == 'Windows' && env.DEV_DRIVE_WORKSPACE || github.workspace }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Validate release version against Cargo.toml and CHANGELOG.md
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          set -euo pipefail
          crate_version="${{ github.ref_name }}"
          expected_version=$(sed -n 's/^version[[:space:]]*=[[:space:]]*"\([^"]*\)".*/\1/p' crates/gdvm/Cargo.toml | head -1)

          if [[ "$crate_version" != "v$expected_version" ]]; then
            echo "::error::Release version $crate_version does not match Cargo.toml version $expected_version."
            echo "::error::Please update the Cargo.toml version to match the release tag."
            exit 1
          fi

          # Read the first version header underneath the unreleased section in CHANGELOG.md
          changelog_version=$(sed -nE 's/^## (v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p' CHANGELOG.md | head -1)

          if [[ "$crate_version" != "$changelog_version" ]]; then
            echo "::error::Release version $crate_version does not match CHANGELOG.md version $changelog_version."
            echo "::error::Please update the CHANGELOG.md version to match the release tag."
            exit 1
          fi

      - name: Check i18n bundles for missing keys
        if: success() || failure()
        working-directory: ${{ runner.os == 'Windows' && env.DEV_DRIVE_WORKSPACE || github.workspace }}
        shell: bash
        run: scripts/find-missing-i18n.sh

      - name: Check i18n bundles for formatting
        if: success() || failure()
        working-directory: ${{ runner.os == 'Windows' && env.DEV_DRIVE_WORKSPACE || github.workspace }}
        shell: pwsh
        run: scripts/sort-i18n.ps1

      - name: Check formatting
        if: success() || failure()
        working-directory: ${{ runner.os == 'Windows' && env.DEV_DRIVE_WORKSPACE || github.workspace }}
        run: cargo fmt -- --check

      - name: Check clippy
        if: success() || failure()
        working-directory: ${{ runner.os == 'Windows' && env.DEV_DRIVE_WORKSPACE || github.workspace }}
        shell: bash
        run: |
          cargo clippy --release --all-targets --all-features -- \
            -D clippy::suspicious -D clippy::style -D clippy::complexity \
            -D clippy::perf -D clippy::dbg_macro -D clippy::todo \
            -D clippy::unimplemented -D warnings

      - name: Run unit and integration tests
        if: (success() || failure()) && (contains(matrix.target, 'x86_64') || contains(matrix.target, 'aarch64'))
        working-directory: ${{ runner.os == 'Windows' && env.DEV_DRIVE_WORKSPACE || github.workspace }}
        run: cargo test --release --features integration-tests --target ${{ matrix.target }}

      - name: Archive binary (*nix)
        if: (success() || failure()) && !contains(matrix.os, 'windows')
        working-directory: ./target/${{ matrix.target }}/release
        run: tar -cvf binary.tar gdvm && mv binary.tar ../../..

      - name: Archive binary (Windows)
        shell: bash
        if: (success() || failure()) && contains(matrix.os, 'windows')
        run: |
          cd "${{ env.DEV_DRIVE_WORKSPACE }}/target/${{ matrix.target }}/release"
          tar -cvf binary.tar gdvm.exe
          cp binary.tar "$GITHUB_WORKSPACE/"

      - name: Upload binary artifact
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: binary.tar

  e2e:
    name: End-to-End Tests
    runs-on: ${{ matrix.os }}
    needs: build-test
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc

          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-${{ matrix.target }}

      - name: Extract binary artifact
        run: tar -xvf binary.tar

      - name: Install gdvm (*nix)
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
          mkdir -p ~/.gdvm/bin
          cp ./gdvm ~/.gdvm/bin/gdvm
          echo "$HOME/.gdvm/bin" >> $GITHUB_PATH
          ~/.gdvm/bin/gdvm --version

      - name: Install gdvm (Windows)
        if: contains(matrix.os, 'windows')
        shell: bash
        run: |
          mkdir -p ~/.gdvm/bin
          cp ./gdvm.exe ~/.gdvm/bin/gdvm.exe
          echo "$HOME/.gdvm/bin" >> $GITHUB_PATH
          ~/.gdvm/bin/gdvm.exe --version

      - name: Set up GitHub token
        if: success() || failure()
        shell: bash
        run: gdvm config set github.token ${{ secrets.GITHUB_TOKEN }}

      - name: Search for 4.x releases of Godot
        if: success() || failure()
        shell: bash
        run: gdvm search --filter 4 | grep 4.3-stable

      - name: Install Godot 4.3
        if: success() || failure()
        shell: bash
        run: gdvm install 4.3

      - name: Install Godot 3.6.0
        if: (success() || failure()) && matrix.os != 'windows-11-arm'
        shell: bash
        run: gdvm install 3.6.0

      - name: Use Godot 3.6.0 globally
        if: (success() || failure()) && matrix.os != 'windows-11-arm'
        shell: bash
        run: gdvm use 3.6.0

      - name: Install Godot 4.4.0
        if: (success() || failure()) && matrix.os == 'windows-11-arm'
        shell: bash
        run: gdvm install 4.4.0

      - name: Use Godot 4.4.0 globally
        if: (success() || failure()) && matrix.os == 'windows-11-arm'
        shell: bash
        run: gdvm use 4.4.0

      - name: Pin Godot 4.3.0 to current directory
        if: success() || failure()
        shell: bash
        run: gdvm pin 4.3.0

      - name: Running Godot in current directory should use 4.3.0
        if: success() || failure()
        shell: bash
        run: gdvm run --console=true -- --version | grep 4.3.stable.official

      - name: Running Godot in current directory with godot alias should use 4.3.0
        if: (success() || failure()) && !contains(matrix.os, 'windows')
        shell: bash
        run: godot --version | grep 4.3.stable.official

      - name: Running Godot in current directory with godot_console alias should use 4.3.0
        if: (success() || failure()) && contains(matrix.os, 'windows')
        shell: bash
        run: godot_console --version | grep 4.3.stable.official

      - name: Running Godot 3.5 explicitly should use latest 3.5
        if: (success() || failure()) && !contains(matrix.target, 'aarch64')
        shell: bash
        run: gdvm run 3.5 --console=true -- --version | grep 3.5.3.stable.official

      - name: Running Godot 4.4 explicitly should use latest 4.4
        if: (success() || failure()) && contains(matrix.target, 'aarch64')
        shell: bash
        run: gdvm run 4.4 --console=true -- --version | grep 4.4.1.stable.official

      - name: Running latest stable Godot should work
        shell: bash
        run: gdvm run stable --console=true -- --version | grep stable.official

  publish:
    name: Publish binaries
    if: startsWith(github.ref, 'refs/tags/v')
    needs: e2e
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    env:
      EXPECTED_TARGETS: |
        x86_64-unknown-linux-gnu
        i686-unknown-linux-gnu
        aarch64-unknown-linux-gnu
        x86_64-pc-windows-msvc
        i686-pc-windows-msvc
        aarch64-pc-windows-msvc
        x86_64-apple-darwin
        aarch64-apple-darwin

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            CHANGELOG.md
            scripts/get-release-description.ps1

      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*

      - name: Extract & rename binaries
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist

          while IFS= read -r target; do
            [[ -z "$target" ]] && continue
            dir="binary-${target}"
            if [[ ! -d "$dir" ]]; then
              echo "::error::artifact for $target not found"
              exit 1
            fi

            tar -xf "$dir/binary.tar" -C "$dir"

            if [[ "$target" == *windows-msvc ]]; then
              mv "$dir/gdvm.exe" "dist/gdvm-${target}.exe"
            else
              mv "$dir/gdvm" "dist/gdvm-${target}"
              chmod +x "dist/gdvm-${target}"
            fi
          done <<< "$EXPECTED_TARGETS"

      - name: Generate release description
        shell: pwsh
        run: |
          & scripts/get-release-description.ps1 | Out-File -FilePath "release_description.md" -Encoding utf8

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: release_description.md
          files: dist/*
          draft: false
          prerelease: false

  delete-artifacts:
    name: Delete Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [e2e, publish]
    steps:
      - name: Delete binary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: binary-*
